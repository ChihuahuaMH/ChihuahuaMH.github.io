<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ChihuahuaMH</title>
    <link>https://ChihuahuaMH.github.io/</link>
    <description>Recent content on ChihuahuaMH</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 26 Oct 2022 16:50:01 +0800</lastBuildDate><atom:link href="https://ChihuahuaMH.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Sumo] Hello SUMO!</title>
      <link>https://ChihuahuaMH.github.io/posts/sumo-hello-sumo/</link>
      <pubDate>Wed, 26 Oct 2022 16:50:01 +0800</pubDate>
      
      <guid>https://ChihuahuaMH.github.io/posts/sumo-hello-sumo/</guid>
      <description>這篇是參考官網 Hello SUMO 教學，以寫 xml 的方式建立路網模擬汽車行駛，加上一些些的補充說明。
Introduction Sumo 中的 street network 是由兩個東西組成的：
nodes（節點，也稱為 junctions） edges（邊，nodes 連接而成的） 本篇要建立的路網是兩條 street，需要 3 個 nodes 和 2 個 edges。下圖是簡單用 NETEDIT 模擬一下：
在開始下面的步驟之前，先建立一個資料夾，全部的東西放在這個資料夾裡面才可以跑模擬。
Nodes 首先要先建立 nodes，每個 node 都有各自的 x 軸 y 軸（代表該節點與原點的距離，以米為單位）和 id。
先在剛才建立的資料夾內新增一個 hello.nod.xml 的檔案，並創建三個節點：
&amp;lt;nodes&amp;gt; &amp;lt;node id=&amp;#34;1&amp;#34; x=&amp;#34;-250.0&amp;#34; y=&amp;#34;0.0&amp;#34; /&amp;gt; &amp;lt;node id=&amp;#34;2&amp;#34; x=&amp;#34;+250.0&amp;#34; y=&amp;#34;0.0&amp;#34; /&amp;gt; &amp;lt;node id=&amp;#34;3&amp;#34; x=&amp;#34;+500.0&amp;#34; y=&amp;#34;0.0&amp;#34; /&amp;gt; &amp;lt;/nodes&amp;gt; ＊node.xml 是 Sumo node files 的後綴
Edges 接著把剛剛建立的節點連接起來！連接的方式很簡單，就是透過每個 node 的 id 作為 reference。</description>
    </item>
    
    <item>
      <title>[GitHub] 解決 remote: Invalid username or password 問題</title>
      <link>https://ChihuahuaMH.github.io/posts/github-%E8%A7%A3%E6%B1%BA-remote-invalid-username-or-password-%E5%95%8F%E9%A1%8C.md/</link>
      <pubDate>Wed, 10 Aug 2022 00:25:43 +0800</pubDate>
      
      <guid>https://ChihuahuaMH.github.io/posts/github-%E8%A7%A3%E6%B1%BA-remote-invalid-username-or-password-%E5%95%8F%E9%A1%8C.md/</guid>
      <description>問題 前陣子在更新部落格後，使用 deploy.sh 會出現以下問題：
remote: Invalid username or password. fatal: Authentication failed for &amp;#39;https://github.com/[user]/[repo].git/&amp;#39; 查了資料後發現和 Personal Access Token 有關，立刻跑去看～竟然過期了！！！ 解決方法 Token 過期的話，產生新的 Personal Access Token 就好了！
基本上和之前 [Hugo] 自動部署網站到 GitHub 與 GitHub Pages 生成 Token 的方式一樣，要記得先將原本過期的 Token 刪除～
接著加入 Actions secrets 的部分，不需要刪除，按 Update 把剛剛拿到的值貼進去就好了！ 參考資料 github removed username/password authorization. Now what? </description>
    </item>
    
    <item>
      <title>[OpenCV] 使用 cv2 的踩雷紀錄</title>
      <link>https://ChihuahuaMH.github.io/posts/opencv-%E4%BD%BF%E7%94%A8-cv2-%E7%9A%84%E8%B8%A9%E9%9B%B7%E7%B4%80%E9%8C%84/</link>
      <pubDate>Thu, 19 May 2022 19:35:58 +0800</pubDate>
      
      <guid>https://ChihuahuaMH.github.io/posts/opencv-%E4%BD%BF%E7%94%A8-cv2-%E7%9A%84%E8%B8%A9%E9%9B%B7%E7%B4%80%E9%8C%84/</guid>
      <description>最近接到一份作業，其中有一題是把圖片從彩圖轉為灰階。 第一時間是想到用 OpenCV，沒想到踩了好多雷哇！（自己最雷） 所以把這些問題紀錄一下，以後再遇到可以回來看看 🥲
cv2.imread() 讀取圖片失敗 img = cv2.imread(&amp;#34;test.jpg&amp;#34;) cv2.imshow(&amp;#39;Original Image&amp;#39;, img) cv2.waitKey(0) 第一個問題是使用 cv2.imread() 讀取圖片，卻一直無法顯示出來……。
利用 print(img) 顯示結果，如為 None 代表圖片沒有被讀入。此時有下列 2 種解法可以參考：
1. 檢查路徑 含有中文的路徑
路徑中包含中文會導致圖片讀取失敗，例如：&amp;quot;.\作業\test.jpg&amp;quot;。 盡量利用英文去命名資料夾和檔案，可以改成：&amp;quot;.\hw\test.jpg&amp;quot;
\ 跳脫字元
Windows 路徑的 \ 對 python 來說是跳脫字元，因此要再多加一個 \ 才能正確輸入路徑，例如：&amp;quot;.\\hw\\test.jpg&amp;quot;
2. 圖片格式的問題 可以試著用其他軟體（PS 或 AI 之類的）開啟圖片看看會不會報錯，或是準備另外一張圖片試試看能不能被 cv2.imread() 讀入。
注意！不要修改其副檔名，不然有可能導致錯誤。 折騰了一下午，最後竟是這個問題導致圖片無法讀入！ 感謝這篇文章教學，裡面這段還蠻好的，引用一下：
字尾是一個標籤，表明檔案的型別和格式，至於檔案到底是不是該格式就另說了。有時候改了字尾名，檔案仍能被開啟（我遇到的情況），是因為檔案內容還有檔案頭，有些應用程式會根據檔案頭中的資訊來判斷檔案的格式（比如 windows 自帶的照片檢視器）而不是通過後綴名。所以切實有效的方式還是通過格式轉換軟體來轉換格式。
cv2.imwrite() 無法存圖片 參考這篇文章的教學，cv2.imwrite() 保存圖片會返回 True 或是 False 的值，因此可以撰寫程式測試是否有保存成功：
status = cv2.imwrite(&amp;#39;python_gray.png&amp;#39;,gray_img) print(&amp;#34;Image written to file-system : &amp;#34;,status) 以此檢查是否有成功保存。如果為 False，可以檢查一下：</description>
    </item>
    
    <item>
      <title>[Hugo] 自動部署網站到 GitHub 與 GitHub Pages</title>
      <link>https://ChihuahuaMH.github.io/posts/hugo-%E8%87%AA%E5%8B%95%E9%83%A8%E7%BD%B2%E7%B6%B2%E7%AB%99%E5%88%B0-github-%E8%88%87-github-pages/</link>
      <pubDate>Tue, 10 May 2022 02:08:54 +0800</pubDate>
      
      <guid>https://ChihuahuaMH.github.io/posts/hugo-%E8%87%AA%E5%8B%95%E9%83%A8%E7%BD%B2%E7%B6%B2%E7%AB%99%E5%88%B0-github-%E8%88%87-github-pages/</guid>
      <description>這是用 Hugo 建立的 Blog，我將 Blog 的原始碼與靜態網頁分別部署到 GitHub 不同的 repository 中：
Hugo_blog Private 換電腦或檔案不見可以從這個 repo clone 下來使用 GitHub_User/GitHub_User.github.io Public 將生成的靜態網頁（./public）部署到 GitHub Pages 上 每次寫完文章要部署到 GitHub，都要輸入一堆指令後推到這兩個 repo，不是很累人嗎？ (╯_╰) 為了減少繁瑣的工作流程，可以利用腳本 deploy.sh 與 GitHub Actions 建立 workflow 達成自動化部署，省事省力又方便！
Deploy.sh #!/bin/bash set -e echo &amp;#34;✨ Start deploy&amp;#34; msg=&amp;#34;Update on $(date +&amp;#34;%Y.%m.%d&amp;#34;)&amp;#34; if [ -n &amp;#34;$*&amp;#34; ]; then msg=&amp;#34;$*&amp;#34; fi echo &amp;#34;🏃 Running...&amp;#34; git pull git add . git commit -m &amp;#34;$msg&amp;#34; git push echo &amp;#34;🚩 Done!</description>
    </item>
    
    <item>
      <title>[PowerShell] 使用 Oh My Posh 美化樣式</title>
      <link>https://ChihuahuaMH.github.io/posts/powershell-%E4%BD%BF%E7%94%A8-oh-my-posh-%E7%BE%8E%E5%8C%96%E6%A8%A3%E5%BC%8F/</link>
      <pubDate>Tue, 03 May 2022 00:44:13 +0800</pubDate>
      
      <guid>https://ChihuahuaMH.github.io/posts/powershell-%E4%BD%BF%E7%94%A8-oh-my-posh-%E7%BE%8E%E5%8C%96%E6%A8%A3%E5%BC%8F/</guid>
      <description>一直在追求打造美美的開發環境！在用過 Oh My Zsh 後，也想將 Windows 下的 PowerShell 美化，但出於各種原因遲遲未動工 🥲。
直到這幾天偶然看到 Oh My Posh 的教學，也剛好沒什麼事情，便動起手來打造漂亮的 PowerShell 了！
環境配置 Windows 11 PowerShell 7 安裝過程 安裝 Nerd Font 字型 為了可以正常顯示字型與 icon，可以在 Nerd Fonts 官網挑選自己喜歡的字型安裝。有些字型可以透過粉色按鈕預覽。
私心推薦：
FiraCode Nerd Font JetBrainsMono Nerd Font 修改字型 打開 PowerShell 的設定，並將字型改成剛剛下載的 NF 字型，完成後按儲存。 安裝 Oh My Posh 在 PowerShell 介面下輸入指令安裝：
winget install oh-my-posh 安裝完成後，先在 Oh My Posh 的官網中挑選喜歡的主題。以我這邊為例，挑選的主題是 M365Princess ～
接著在 PowerShell 中輸入指令，準備修改它的設定檔
code $Profile 在打開的設定檔中貼上下面的指令：
oh-my-posh init pwsh --config ~/.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ChihuahuaMH.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ChihuahuaMH.github.io/about/</guid>
      <description>Hi!</description>
    </item>
    
    
    
  </channel>
</rss>
