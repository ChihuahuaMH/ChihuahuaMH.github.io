[{"content":"這篇是參考官網 Hello SUMO 教學，以寫 xml 的方式建立路網模擬汽車行駛，加上一些些的補充說明。\nIntroduction Sumo 中的 street network 是由兩個東西組成的：\nnodes（節點，也稱為 junctions） edges（邊，nodes 連接而成的） 本篇要建立的路網是兩條 street，需要 3 個 nodes 和 2 個 edges。下圖是簡單用 NETEDIT 模擬一下：\n在開始下面的步驟之前，先建立一個資料夾，全部的東西放在這個資料夾裡面才可以跑模擬。\nNodes 首先要先建立 nodes，每個 node 都有各自的 x 軸 y 軸（代表該節點與原點的距離，以米為單位）和 id。\n先在剛才建立的資料夾內新增一個 hello.nod.xml 的檔案，並創建三個節點：\n\u0026lt;nodes\u0026gt; \u0026lt;node id=\u0026#34;1\u0026#34; x=\u0026#34;-250.0\u0026#34; y=\u0026#34;0.0\u0026#34; /\u0026gt; \u0026lt;node id=\u0026#34;2\u0026#34; x=\u0026#34;+250.0\u0026#34; y=\u0026#34;0.0\u0026#34; /\u0026gt; \u0026lt;node id=\u0026#34;3\u0026#34; x=\u0026#34;+500.0\u0026#34; y=\u0026#34;0.0\u0026#34; /\u0026gt; \u0026lt;/nodes\u0026gt; ＊node.xml 是 Sumo node files 的後綴\nEdges 接著把剛剛建立的節點連接起來！連接的方式很簡單，就是透過每個 node 的 id 作為 reference。\n在資料夾內新增 hello.edg.xml 的檔案，寫入 edges 連接的方法：\n\u0026lt;edges\u0026gt; \u0026lt;edge from=\u0026#34;1\u0026#34; id=\u0026#34;1to2\u0026#34; to=\u0026#34;2\u0026#34; /\u0026gt; \u0026lt;edge from=\u0026#34;2\u0026#34; id=\u0026#34;out\u0026#34; to=\u0026#34;3\u0026#34; /\u0026gt; \u0026lt;/edges\u0026gt; 這裡的意思就是從 node1 到 node2（這段稱為 1to2），再從 node2 到 node3（這段稱為 out）\n＊edg.xml 是 Sumo edge files 的後綴\nNetconvert 這步驟是要把剛才寫的 nodes 和 edges 檔案用 netconvert 轉為路網（.net.xml）。開啟終端機，輸入：\nnetconvert --node-files=hello.nod.xml --edge-files=hello.edg.xml --output-file=hello.net.xml 如果成功會出現 Success，在資料夾下就會看到 hello.net.xml 這個檔案哦！\n＊請確認是在該專案資料夾的路徑下執行\nRoutes 現在有路網了，還需要交通工具在上面跑才可以模擬～\n這邊的話先簡單介紹：\n\u0026lt;v-type\u0026gt;\n定義交通工具基礎的屬性，像是車長、加速度、減速度或最大速度之類的 \u0026lt;route\u0026gt;\n由 edges id 組成 要有 route id \u0026lt;vehicle\u0026gt;\n每台交通工具的定義，詳細可以參考這裡 本篇模擬以 car 作為交通工具 要有 vehicle id 在資料夾下建立 hello.rou.xml，寫入 route 和 vehicle：\n\u0026lt;routes\u0026gt; \u0026lt;vType accel=\u0026#34;1.0\u0026#34; decel=\u0026#34;5.0\u0026#34; id=\u0026#34;Car\u0026#34; length=\u0026#34;2.0\u0026#34; maxSpeed=\u0026#34;100.0\u0026#34; sigma=\u0026#34;0.0\u0026#34; /\u0026gt; \u0026lt;route id=\u0026#34;route0\u0026#34; edges=\u0026#34;1to2 out\u0026#34;/\u0026gt; \u0026lt;vehicle depart=\u0026#34;1\u0026#34; id=\u0026#34;veh0\u0026#34; route=\u0026#34;route0\u0026#34; type=\u0026#34;Car\u0026#34; /\u0026gt; \u0026lt;/routes\u0026gt; 這裡可以根據自己的喜歡去跑跑看不同的模擬。\nConfiguration 最後是要來寫設定檔，把剛才寫的檔案合在一起跑模擬。一樣在資料夾下操作，新增一個 hello.sumocfg 的檔案，寫入：\n\u0026lt;configuration\u0026gt; \u0026lt;input\u0026gt; \u0026lt;net-file value=\u0026#34;hello.net.xml\u0026#34;/\u0026gt; \u0026lt;route-files value=\u0026#34;hello.rou.xml\u0026#34;/\u0026gt; \u0026lt;/input\u0026gt; \u0026lt;time\u0026gt; \u0026lt;begin value=\u0026#34;0\u0026#34;/\u0026gt; \u0026lt;end value=\u0026#34;10000\u0026#34;/\u0026gt; \u0026lt;/time\u0026gt; \u0026lt;/configuration\u0026gt; 完成之後在終端機執行 sumo -c hello.sumocfg 就可以模擬了！\n我會習慣用 Sumo GUI 看模擬情形，所以這裡做一下修改。 新增一個檔案 hello.settings.xml ，可以寫入自己喜歡的設定，方便開啟 Sumo GUI 模擬時，不用自己手動作調整：\n\u0026lt;viewsettings\u0026gt; \u0026lt;viewport y=\u0026#34;0\u0026#34; x=\u0026#34;360\u0026#34; zoom=\u0026#34;95\u0026#34;/\u0026gt; \u0026lt;delay value=\u0026#34;20\u0026#34;/\u0026gt; \u0026lt;scheme name=\u0026#34;real world\u0026#34;/\u0026gt; \u0026lt;/viewsettings\u0026gt; 再把這個加入 hello.sumocfg 裡：\n\u0026lt;configuration\u0026gt; \u0026lt;input\u0026gt; \u0026lt;net-file value=\u0026#34;hello.net.xml\u0026#34;/\u0026gt; \u0026lt;route-files value=\u0026#34;hello.rou.xml\u0026#34;/\u0026gt; \u0026lt;gui-settings-file value=\u0026#34;hello.settings.xml\u0026#34;/\u0026gt; \u0026lt;/input\u0026gt; \u0026lt;time\u0026gt; \u0026lt;begin value=\u0026#34;0\u0026#34;/\u0026gt; \u0026lt;end value=\u0026#34;10000\u0026#34;/\u0026gt; \u0026lt;/time\u0026gt; \u0026lt;/configuration\u0026gt; 最後在終端機輸入指令 sumo-gui -c hello.sumocfg ，按 Run 看看結果吧！\n參考資料 Hello SUMO Definition of Vehicles, Vehicle Types, and Routes SUMO应用工具：SUMO-GUI ","permalink":"https://ChihuahuaMH.github.io/posts/sumo-hello-sumo/","summary":"這篇是參考官網 Hello SUMO 教學，以寫 xml 的方式建立路網模擬汽車行駛，加上一些些的補充說明。\nIntroduction Sumo 中的 street network 是由兩個東西組成的：\nnodes（節點，也稱為 junctions） edges（邊，nodes 連接而成的） 本篇要建立的路網是兩條 street，需要 3 個 nodes 和 2 個 edges。下圖是簡單用 NETEDIT 模擬一下：\n在開始下面的步驟之前，先建立一個資料夾，全部的東西放在這個資料夾裡面才可以跑模擬。\nNodes 首先要先建立 nodes，每個 node 都有各自的 x 軸 y 軸（代表該節點與原點的距離，以米為單位）和 id。\n先在剛才建立的資料夾內新增一個 hello.nod.xml 的檔案，並創建三個節點：\n\u0026lt;nodes\u0026gt; \u0026lt;node id=\u0026#34;1\u0026#34; x=\u0026#34;-250.0\u0026#34; y=\u0026#34;0.0\u0026#34; /\u0026gt; \u0026lt;node id=\u0026#34;2\u0026#34; x=\u0026#34;+250.0\u0026#34; y=\u0026#34;0.0\u0026#34; /\u0026gt; \u0026lt;node id=\u0026#34;3\u0026#34; x=\u0026#34;+500.0\u0026#34; y=\u0026#34;0.0\u0026#34; /\u0026gt; \u0026lt;/nodes\u0026gt; ＊node.xml 是 Sumo node files 的後綴\nEdges 接著把剛剛建立的節點連接起來！連接的方式很簡單，就是透過每個 node 的 id 作為 reference。","title":"[Sumo] Hello SUMO!"},{"content":"問題 前陣子在更新部落格後，使用 deploy.sh 會出現以下問題：\nremote: Invalid username or password. fatal: Authentication failed for \u0026#39;https://github.com/[user]/[repo].git/\u0026#39; 查了資料後發現和 Personal Access Token 有關，立刻跑去看～竟然過期了！！！ 解決方法 Token 過期的話，產生新的 Personal Access Token 就好了！\n基本上和之前 [Hugo] 自動部署網站到 GitHub 與 GitHub Pages 生成 Token 的方式一樣，要記得先將原本過期的 Token 刪除～\n接著加入 Actions secrets 的部分，不需要刪除，按 Update 把剛剛拿到的值貼進去就好了！ 參考資料 github removed username/password authorization. Now what? ","permalink":"https://ChihuahuaMH.github.io/posts/github-%E8%A7%A3%E6%B1%BA-remote-invalid-username-or-password-%E5%95%8F%E9%A1%8C.md/","summary":"問題 前陣子在更新部落格後，使用 deploy.sh 會出現以下問題：\nremote: Invalid username or password. fatal: Authentication failed for \u0026#39;https://github.com/[user]/[repo].git/\u0026#39; 查了資料後發現和 Personal Access Token 有關，立刻跑去看～竟然過期了！！！ 解決方法 Token 過期的話，產生新的 Personal Access Token 就好了！\n基本上和之前 [Hugo] 自動部署網站到 GitHub 與 GitHub Pages 生成 Token 的方式一樣，要記得先將原本過期的 Token 刪除～\n接著加入 Actions secrets 的部分，不需要刪除，按 Update 把剛剛拿到的值貼進去就好了！ 參考資料 github removed username/password authorization. Now what? ","title":"[GitHub] 解決 remote: Invalid username or password 問題"},{"content":"最近接到一份作業，其中有一題是把圖片從彩圖轉為灰階。 第一時間是想到用 OpenCV，沒想到踩了好多雷哇！（自己最雷） 所以把這些問題紀錄一下，以後再遇到可以回來看看 🥲\ncv2.imread() 讀取圖片失敗 img = cv2.imread(\u0026#34;test.jpg\u0026#34;) cv2.imshow(\u0026#39;Original Image\u0026#39;, img) cv2.waitKey(0) 第一個問題是使用 cv2.imread() 讀取圖片，卻一直無法顯示出來……。\n利用 print(img) 顯示結果，如為 None 代表圖片沒有被讀入。此時有下列 2 種解法可以參考：\n1. 檢查路徑 含有中文的路徑\n路徑中包含中文會導致圖片讀取失敗，例如：\u0026quot;.\\作業\\test.jpg\u0026quot;。 盡量利用英文去命名資料夾和檔案，可以改成：\u0026quot;.\\hw\\test.jpg\u0026quot;\n\\ 跳脫字元\nWindows 路徑的 \\ 對 python 來說是跳脫字元，因此要再多加一個 \\ 才能正確輸入路徑，例如：\u0026quot;.\\\\hw\\\\test.jpg\u0026quot;\n2. 圖片格式的問題 可以試著用其他軟體（PS 或 AI 之類的）開啟圖片看看會不會報錯，或是準備另外一張圖片試試看能不能被 cv2.imread() 讀入。\n注意！不要修改其副檔名，不然有可能導致錯誤。 折騰了一下午，最後竟是這個問題導致圖片無法讀入！ 感謝這篇文章教學，裡面這段還蠻好的，引用一下：\n字尾是一個標籤，表明檔案的型別和格式，至於檔案到底是不是該格式就另說了。有時候改了字尾名，檔案仍能被開啟（我遇到的情況），是因為檔案內容還有檔案頭，有些應用程式會根據檔案頭中的資訊來判斷檔案的格式（比如 windows 自帶的照片檢視器）而不是通過後綴名。所以切實有效的方式還是通過格式轉換軟體來轉換格式。\ncv2.imwrite() 無法存圖片 參考這篇文章的教學，cv2.imwrite() 保存圖片會返回 True 或是 False 的值，因此可以撰寫程式測試是否有保存成功：\nstatus = cv2.imwrite(\u0026#39;python_gray.png\u0026#39;,gray_img) print(\u0026#34;Image written to file-system : \u0026#34;,status) 以此檢查是否有成功保存。如果為 False，可以檢查一下：\n保存圖片的路徑是否正確\n是否有設置 cv2.waitKey(0)\n這個就是我踩到的雷 XD 開這個看圖片的轉換情況，結果一直存不了圖，把視窗關掉後竟然神奇的就可以保存圖片了！\n最後放一個此題作業完整的程式碼～很基本的全彩圖轉灰階圖並保存到 C 槽下，紀念辛苦又瘋狂 debug 的成果 TT\nimport cv2 img = cv2.imread(\u0026#34;test.jpg\u0026#34;) gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) cv2.imwrite(\u0026#34;C:\\\\gray_img.jpg\u0026#34;,gray_img) 參考資料 @cv2.imread()读取图片失败 解決 python cv2.imread 讀取中文路徑的圖片返回為 None 的問題 OpenCV Python Save Image – cv2.imwrite() ","permalink":"https://ChihuahuaMH.github.io/posts/opencv-%E4%BD%BF%E7%94%A8-cv2-%E7%9A%84%E8%B8%A9%E9%9B%B7%E7%B4%80%E9%8C%84/","summary":"最近接到一份作業，其中有一題是把圖片從彩圖轉為灰階。 第一時間是想到用 OpenCV，沒想到踩了好多雷哇！（自己最雷） 所以把這些問題紀錄一下，以後再遇到可以回來看看 🥲\ncv2.imread() 讀取圖片失敗 img = cv2.imread(\u0026#34;test.jpg\u0026#34;) cv2.imshow(\u0026#39;Original Image\u0026#39;, img) cv2.waitKey(0) 第一個問題是使用 cv2.imread() 讀取圖片，卻一直無法顯示出來……。\n利用 print(img) 顯示結果，如為 None 代表圖片沒有被讀入。此時有下列 2 種解法可以參考：\n1. 檢查路徑 含有中文的路徑\n路徑中包含中文會導致圖片讀取失敗，例如：\u0026quot;.\\作業\\test.jpg\u0026quot;。 盡量利用英文去命名資料夾和檔案，可以改成：\u0026quot;.\\hw\\test.jpg\u0026quot;\n\\ 跳脫字元\nWindows 路徑的 \\ 對 python 來說是跳脫字元，因此要再多加一個 \\ 才能正確輸入路徑，例如：\u0026quot;.\\\\hw\\\\test.jpg\u0026quot;\n2. 圖片格式的問題 可以試著用其他軟體（PS 或 AI 之類的）開啟圖片看看會不會報錯，或是準備另外一張圖片試試看能不能被 cv2.imread() 讀入。\n注意！不要修改其副檔名，不然有可能導致錯誤。 折騰了一下午，最後竟是這個問題導致圖片無法讀入！ 感謝這篇文章教學，裡面這段還蠻好的，引用一下：\n字尾是一個標籤，表明檔案的型別和格式，至於檔案到底是不是該格式就另說了。有時候改了字尾名，檔案仍能被開啟（我遇到的情況），是因為檔案內容還有檔案頭，有些應用程式會根據檔案頭中的資訊來判斷檔案的格式（比如 windows 自帶的照片檢視器）而不是通過後綴名。所以切實有效的方式還是通過格式轉換軟體來轉換格式。\ncv2.imwrite() 無法存圖片 參考這篇文章的教學，cv2.imwrite() 保存圖片會返回 True 或是 False 的值，因此可以撰寫程式測試是否有保存成功：\nstatus = cv2.imwrite(\u0026#39;python_gray.png\u0026#39;,gray_img) print(\u0026#34;Image written to file-system : \u0026#34;,status) 以此檢查是否有成功保存。如果為 False，可以檢查一下：","title":"[OpenCV] 使用 cv2 的踩雷紀錄"},{"content":"這是用 Hugo 建立的 Blog，我將 Blog 的原始碼與靜態網頁分別部署到 GitHub 不同的 repository 中：\nHugo_blog Private 換電腦或檔案不見可以從這個 repo clone 下來使用 GitHub_User/GitHub_User.github.io Public 將生成的靜態網頁（./public）部署到 GitHub Pages 上 每次寫完文章要部署到 GitHub，都要輸入一堆指令後推到這兩個 repo，不是很累人嗎？ (╯_╰) 為了減少繁瑣的工作流程，可以利用腳本 deploy.sh 與 GitHub Actions 建立 workflow 達成自動化部署，省事省力又方便！\nDeploy.sh #!/bin/bash set -e echo \u0026#34;✨ Start deploy\u0026#34; msg=\u0026#34;Update on $(date +\u0026#34;%Y.%m.%d\u0026#34;)\u0026#34; if [ -n \u0026#34;$*\u0026#34; ]; then msg=\u0026#34;$*\u0026#34; fi echo \u0026#34;🏃 Running...\u0026#34; git pull git add . git commit -m \u0026#34;$msg\u0026#34; git push echo \u0026#34;🚩 Done!\u0026#34; 電腦環境是 Win11，這個 deploy.sh 是用 Git Bash 執行的！\nGitHub Actions 生成 Personal Access Token\nGitHub 首頁右上的個人頭像選單 → Settings → Developer settings → Personal access tokens，點選 Generate new token 輸入 token 的名稱，勾選 repo 及 admin:repo_hook 完成後將產生的 token 先存起來放～ 加入 Actions secrets\n到存放 Blog 原始碼的 repo 介面 → Settings → 點選（Security）Secrets → Actions → New repository secret，將上一步產生的 token 放入 value 中並儲存。 ※ 這裡的 Name 要記住～對應 workflow 的 ${{ secrets.token_Name }} 撰寫 workflow\n到存放 Blog 原始碼的 repo 介面 → Actions → 左邊的 New workflow → set up a workflow yourself name: Github Pages on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest name：此 workflow 的名稱 on：觸發的時機和分支，這裡代表推到 main 分支時會運行這個 workflow。 jobs：當上面 on 觸發時，運行的就是 jobs 的部分～ deploy：這裡是 job 名稱，因為是要做部署的工作因此取名 deploy，可以自行取別的名稱！ runs-on： 運行 job 的環境 steps: - uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: external_repository: GitHub_User/GitHub_User.github.io personal_token: ${{ secrets.token_Name }} publish_dir: ./public publish_branch: main submodules：如果是用這個方法加入 Hugo theme，需要設定為 true extended：如果 Blog 是用 Hugo extended，需要設定為 true external_repository：要 Deploy 的目標 repo publish_dir：要將哪個資料夾 Deploy 到目標 repo（因為上一個步驟是 hugo，會產生 ./public 資料夾） personal_token：${{ secrets.token_Name }} 的 token_Name 要對應第二步的 Name！ 這樣日後寫完文章，只要執行 deploy.sh ，就會自動推送到 Hugo_blog 這個 repo，推送時觸發 GitHub Actions 執行～ 最後生成靜態網頁部署到 GitHub_User/GitHub_User.github.io！\n執行 deploy.sh Hugo_blog GitHub_User/GitHub_User.github.io 參考資料 Day 18. Hugo Site 自動部署 - 使用 Bash Shell Script actions/checkout peaceiris/actions-hugo Hugo 使用 Github Action 自动部署博客到 Github Pages 使用 Github Actions 來自動化部署 Hugo 到 Github Pages ","permalink":"https://ChihuahuaMH.github.io/posts/hugo-%E8%87%AA%E5%8B%95%E9%83%A8%E7%BD%B2%E7%B6%B2%E7%AB%99%E5%88%B0-github-%E8%88%87-github-pages/","summary":"這是用 Hugo 建立的 Blog，我將 Blog 的原始碼與靜態網頁分別部署到 GitHub 不同的 repository 中：\nHugo_blog Private 換電腦或檔案不見可以從這個 repo clone 下來使用 GitHub_User/GitHub_User.github.io Public 將生成的靜態網頁（./public）部署到 GitHub Pages 上 每次寫完文章要部署到 GitHub，都要輸入一堆指令後推到這兩個 repo，不是很累人嗎？ (╯_╰) 為了減少繁瑣的工作流程，可以利用腳本 deploy.sh 與 GitHub Actions 建立 workflow 達成自動化部署，省事省力又方便！\nDeploy.sh #!/bin/bash set -e echo \u0026#34;✨ Start deploy\u0026#34; msg=\u0026#34;Update on $(date +\u0026#34;%Y.%m.%d\u0026#34;)\u0026#34; if [ -n \u0026#34;$*\u0026#34; ]; then msg=\u0026#34;$*\u0026#34; fi echo \u0026#34;🏃 Running...\u0026#34; git pull git add . git commit -m \u0026#34;$msg\u0026#34; git push echo \u0026#34;🚩 Done!","title":"[Hugo] 自動部署網站到 GitHub 與 GitHub Pages"},{"content":"一直在追求打造美美的開發環境！在用過 Oh My Zsh 後，也想將 Windows 下的 PowerShell 美化，但出於各種原因遲遲未動工 🥲。\n直到這幾天偶然看到 Oh My Posh 的教學，也剛好沒什麼事情，便動起手來打造漂亮的 PowerShell 了！\n環境配置 Windows 11 PowerShell 7 安裝過程 安裝 Nerd Font 字型 為了可以正常顯示字型與 icon，可以在 Nerd Fonts 官網挑選自己喜歡的字型安裝。有些字型可以透過粉色按鈕預覽。\n私心推薦：\nFiraCode Nerd Font JetBrainsMono Nerd Font 修改字型 打開 PowerShell 的設定，並將字型改成剛剛下載的 NF 字型，完成後按儲存。 安裝 Oh My Posh 在 PowerShell 介面下輸入指令安裝：\nwinget install oh-my-posh 安裝完成後，先在 Oh My Posh 的官網中挑選喜歡的主題。以我這邊為例，挑選的主題是 M365Princess ～\n接著在 PowerShell 中輸入指令，準備修改它的設定檔\ncode $Profile 在打開的設定檔中貼上下面的指令：\noh-my-posh init pwsh --config ~/.主題.omp.json | Invoke-Expression ⚠️ 記得將［主題］替換成自己所選的主題！\n儲存後重啟或是輸入 . $Profile，這樣就完成美美的 PowerShell 了！ 安裝 Terminal Icons 樣式都用好了，怎麼能放過小細節！！來把檔案和資料夾的 icon 也穿上美美的新衣吧！\n在 PowerShell 的介面下輸入指令安裝：\nInstall-Module -Name Terminal-Icons -Repository PSGallery 完成後一樣開啟設定檔進行修改，貼上下列指令：\nImport-Module -Name Terminal-Icons 搭啦～～完成了！！ 參考資料 Oh My Posh Tutorial | Bring Your Windows Terminal To The Next Level Oh My Posh devblackops/Terminal-Icons ","permalink":"https://ChihuahuaMH.github.io/posts/powershell-%E4%BD%BF%E7%94%A8-oh-my-posh-%E7%BE%8E%E5%8C%96%E6%A8%A3%E5%BC%8F/","summary":"一直在追求打造美美的開發環境！在用過 Oh My Zsh 後，也想將 Windows 下的 PowerShell 美化，但出於各種原因遲遲未動工 🥲。\n直到這幾天偶然看到 Oh My Posh 的教學，也剛好沒什麼事情，便動起手來打造漂亮的 PowerShell 了！\n環境配置 Windows 11 PowerShell 7 安裝過程 安裝 Nerd Font 字型 為了可以正常顯示字型與 icon，可以在 Nerd Fonts 官網挑選自己喜歡的字型安裝。有些字型可以透過粉色按鈕預覽。\n私心推薦：\nFiraCode Nerd Font JetBrainsMono Nerd Font 修改字型 打開 PowerShell 的設定，並將字型改成剛剛下載的 NF 字型，完成後按儲存。 安裝 Oh My Posh 在 PowerShell 介面下輸入指令安裝：\nwinget install oh-my-posh 安裝完成後，先在 Oh My Posh 的官網中挑選喜歡的主題。以我這邊為例，挑選的主題是 M365Princess ～\n接著在 PowerShell 中輸入指令，準備修改它的設定檔\ncode $Profile 在打開的設定檔中貼上下面的指令：\noh-my-posh init pwsh --config ~/.","title":"[PowerShell] 使用 Oh My Posh 美化樣式"},{"content":"Hi!\n","permalink":"https://ChihuahuaMH.github.io/about/","summary":"Hi!","title":""}]